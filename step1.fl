/* CEI222: Project Step[1] ID: [Sotiris Vasiliadis-ID19613]_[Michael-Aggelos Demou-19753] _[Konstantinos Konstantinou-ID3] */

%{
	#include <stdio.h>
	#include <string.h>
	#include "tokens.h"
	void processToken(int);
	void printToken(int);
	int val=1;
	char filename[80];
%}
%option yylineno

/*Regular Expressions*/
space     [ \t\n]
wspaces   {space}*
letter    [A-Za-z]
digit     [0-9]
id        {letter}({letter}?{digit})*
number    {digit}+(\.{digit}+)?(E[+-]?{digit}+)?

%%
\n 			{yylineno++;}

{wspaces}	{}
{id} 		{processToken( ID );}
{number} 	{processToken( NUMBER );}
"if" 		{processToken( IF );}
"else" 		{processToken( ELSE );}
"int" 		{processToken( INT );}
"return" 	{processToken( RETURN );}
"void" 		{processToken( VOID );}
"while" 	{processToken( WHILE );}
"+" 		{processToken( PLUS ); }
"-" 		{processToken( MINUS ); }
"*" 		{processToken( TIMES ); }
"/" 		{processToken( DIVIDE ); }
"<" 		{processToken( ST ); }
"<=" 		{processToken( SOE ); }
">" 		{processToken( GT ); }
">=" 		{processToken( GOE ); }
"==" 		{processToken( EQV ); }
"!=" 		{processToken( NEV ); }
"=" 		{processToken( EV ); }
";" 		{processToken( SEMICLN ); }
"," 		{processToken( CMA ); }
"(" 		{processToken( LPAR ); }
")" 		{processToken( RPAR ); }
"[" 		{processToken( LSQBRA ); }
"]" 		{processToken( RSQBRA ); }
"{" 		{processToken( LBRA ); }
"}" 		{processToken( RBRA ); }
"/*" 		{processToken( LCOM ); }
"*/" 		{processToken( RCOM ); }

%%


/*Function to print our tokens*/
void printToken(int t){
	switch(t) {
		case IF: 		printf("Found an IF on line %d of file \"%s\".\n", yylineno, filename);break;
		case ELSE: 		printf("Found an ELSE on line %d of file \"%s\".\n", yylineno, filename);break;
		case INT: 		printf("Found an INT on line %d of file \"%s\".\n", yylineno, filename);break;
		case RETURN: 	printf("Found a RETURN on line %d of file \"%s\".\n", yylineno, filename);break;
		case VOID: 		printf("Found a VOID on line %d of file \"%s\".\n", yylineno, filename);break;
		case WHILE: 	printf("Found a WHILE on line %d of file \"%s\".\n", yylineno, filename);break;
		case PLUS:		printf("Found a \"+\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case MINUS:		printf("Found a \"-\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case TIMES:		printf("Found a \"*\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case DIVIDE:	printf("Found a \"/\" on line %d of file \"%s\".\n", yylineno, filename);break;		
		case ST:		printf("Found a \"<\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case SOE:		printf("Found a \"<=\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case GT:		printf("Found a \">\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case GOE:		printf("Found a \">=\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case EQV:		printf("Found a \"==\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case NEV:		printf("Found a \"!=\" on line %d of file \"%s\".\n", yylineno, filename);break;	
		case EV:		printf("Found a \"=\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case SEMICLN:	printf("Found a \";\" on line %d of file \"%s\".\n", yylineno, filename);break;
        case CMA:		printf("Found a \",\" on line %d of file \"%s\".\n", yylineno, filename);break;
        case LPAR:		printf("Found a \"(\" on line %d of file \"%s\".\n", yylineno, filename);break;
        case RPAR:		printf("Found a \")\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case LSQBRA:	printf("Found a \"[\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case RSQBRA:	printf("Found a \"]\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case LBRA:		printf("Found a \"{\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case RBRA:		printf("Found a \"}\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case LCOM:		printf("Found a \"/*\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case RCOM:		printf("Found a \"*/\" on line %d of file \"%s\".\n", yylineno, filename);break;
		case ID:		printf("Found an ID: \"%s\" on line %d of file \"%s\".\n", yytext, yylineno, filename);break;
		case NUMBER:	printf("Found a NUMBER: \"%s\" on line %d of file \"%s\".\n", yytext, yylineno, filename);break;
		case LETTER:	printf("Found a letter: \"%s\" on line %d of file \"%s\".\n", yytext, yylineno, filename);break;
		case DIGIT:		printf("Found a digit: \"%s\" on line %d of file \"%s\".\n", yytext, yylineno, filename);break;
		};
}

/*Just a redirection function*/
void processToken(int t){
	printToken(t);
}

/*Main Function*/
int main(int argc, char *argv[]) {
	strcpy(filename, argv[1]);			//copy file name
	/*If 2 arguments provided (main input.exe etc) then open file, else mistakes were made*/
	if (argc==2)
		yyin=fopen(argv[1],"r");
	else if (argc<2)
	{
		printf("Too little arguments(files) provided - Exit\n");
		exit(1);
	}	
	else
	{
		printf("Error in opening file - Exit\n");
		exit(1);
	}
	yylex();
	return 0;
}