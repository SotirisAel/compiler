%{
	#include <stdio.h>
%}

%%
"if" { processToken( IF ); }
"else" { processToken( ELSE ); }
"int" { processToken( INT ); }
"return" { processToken( RETURN ); }
"void" { processToken( VOID ); }
"while" { processToken( WHILE ); }

"+" { yylval.val=PL; processToken( RELOP ); }
"-" { yylval.val=MI; processToken( RELOP ); }
"*" { yylval.val=MU; processToken( RELOP ); }
"/" { yylval.val=DI; processToken( RELOP ); }
"<" { yylval.val=ST; processToken( RELOP ); }
"<=" { yylval.val=SE; processToken( RELOP ); }
">" { yylval.val=BT; processToken( RELOP ); }
">=" { yylval.val=BE; processToken( RELOP ); }
"==" { yylval.val=EE; processToken( RELOP ); }
"!=" { yylval.val=NE; processToken( RELOP ); }
"=" { yylval.val=EV; processToken( RELOP ); }
";" { yylval.val=CN; processToken( RELOP ); }
"," { yylval.val=CO; processToken( RELOP ); }
"(" { yylval.val=LP; processToken( RELOP ); }
")" { yylval.val=RP; processToken( RELOP ); }
"[" { yylval.val=LB; processToken( RELOP ); }
"]" { yylval.val=RB; processToken( RELOP ); }
"{" { yylval.val=RS; processToken( RELOP ); }
"}" { yylval.val=LS; processToken( RELOP ); }
"/*" { yylval.val=SC; processToken( RELOP ); }
"*/" { yylval.val=EC; processToken( RELOP ); }

%%   asd

printToken( int t ) {
switch(t) {
case IF: printf(“Found an IF on line %d of file %s \n”, nlines, filename);
break;
case ELSE: printf(“Found an ELSE on line %d of file %s \n”, nlines, filename);
break;
case INT: printf(“Found an INT on line %d of file %s \n”, nlines, filename);
break;
case RETURN: printf(“Found a RETURN on line %d of file %s \n”, nlines, filename);
break;
case VOID: printf(“Found an VOID on line %d of file %s \n”, nlines, filename);
break;
case WHILE: printf(“Found an WHILE on line %d of file %s \n”, nlines, filename);
break;

};
}
processToken( int t ) {
printToken(t);
}

int main() {
	yylex();
}